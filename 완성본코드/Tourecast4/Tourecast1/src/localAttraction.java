/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Enumeration;
/**
 *
 * @author sence
 */
public class localAttraction extends Main {
    /**
     * Creates new form localAttraction
     */
    public localAttraction() {
        initComponents();
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    public void initComponents() {
        System.out.println("localAttraction -> initComponents");
        라디오버튼그룹 = new ButtonGroup();
        지역별관광지버튼 = new JButton();
        지역별날씨정보버튼 = new JButton();
        관광치추천버튼 = new JButton();
        유형콤보박스 = new JComboBox<>(themeType);
        날씨콤보박스 = new JComboBox<>(weatherType);
        지역콤보박스 = new JComboBox<>(areaType);
        검색버튼 = new JButton();
        실외라디오버튼 = new JRadioButton();
        상관없음라디오버튼 = new JRadioButton();
        실내라디오버튼 = new JRadioButton();
        일 = new JComboBox<>();
        월 = new JComboBox<>(new String[]{"01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12"});
        jScrollPane1 = new JScrollPane();
        jTextArea1 = new JTextArea();
        jLabel1 = new JLabel();

        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);

        지역별관광지버튼.setBackground(new Color(158, 141, 186));
        지역별관광지버튼.setFont(new Font("맑은 고딕", 0, 36)); // NOI18N
        지역별관광지버튼.setForeground(new Color(255, 255, 255));
        지역별관광지버튼.setText("지역별 관광지");

        지역별날씨정보버튼.setBackground(new Color(158, 141, 186));
        지역별날씨정보버튼.setFont(new Font("맑은 고딕", 0, 36)); // NOI18N
        지역별날씨정보버튼.setForeground(new Color(255, 255, 255));
        지역별날씨정보버튼.setText("지역별 날씨정보");

        관광치추천버튼.setBackground(new Color(158, 141, 186));
        관광치추천버튼.setFont(new Font("맑은 고딕", 0, 36)); // NOI18N
        관광치추천버튼.setForeground(new Color(255, 255, 255));
        관광치추천버튼.setText("관광지추천");

        유형콤보박스.setBackground(new Color(204, 204, 204));
        유형콤보박스.setFont(new Font("맑은 고딕", 0, 18)); // NOI18N

        날씨콤보박스.setBackground(new Color(204, 204, 204));
        날씨콤보박스.setFont(new Font("맑은 고딕", 0, 18)); // NOI18N

        지역콤보박스.setBackground(new Color(204, 204, 204));
        지역콤보박스.setFont(new Font("맑은 고딕", 0, 18)); // NOI18N

        검색버튼.setIcon(new ImageIcon(getClass().getResource("/images/검색버튼.png"))); // NOI18N
        검색버튼.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                검색버튼ActionPerformed(evt);
            }
        });

        실외라디오버튼.setBackground(new Color(255, 255, 255));
        라디오버튼그룹.add(실외라디오버튼);
        실외라디오버튼.setFont(new Font("맑은 고딕", 1, 24)); // NOI18N
        실외라디오버튼.setText("실외");

        상관없음라디오버튼.setBackground(new Color(255, 255, 255));
        라디오버튼그룹.add(상관없음라디오버튼);
        상관없음라디오버튼.setFont(new Font("맑은 고딕", 1, 24)); // NOI18N
        상관없음라디오버튼.setText("상관 없음");

        상관없음라디오버튼.setSelected(true);

        실내라디오버튼.setBackground(new Color(255, 255, 255));
        라디오버튼그룹.add(실내라디오버튼);
        실내라디오버튼.setFont(new Font("맑은 고딕", 1, 24)); // NOI18N
        실내라디오버튼.setText("실내");

        일.setBackground(new Color(204, 204, 204));
        일.setFont(new Font("맑은 고딕", 0, 18)); // NOI18N

        월.setBackground(new Color(204, 204, 204));
        월.setFont(new Font("맑은 고딕", 0, 18)); // NOI18N

        jTextArea1.setBackground(new Color(236, 225, 255));
        jTextArea1.setColumns(20);
        jTextArea1.setFont(new Font("맑은 고딕", 0, 18)); // NOI18N
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jLabel1.setIcon(new ImageIcon(getClass().getResource("/images/지역별관광지.png"))); // NOI18N
        jLabel1.setText("jLabel1");

        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGap(421, 421, 421)
                                .addComponent(지역별관광지버튼, GroupLayout.PREFERRED_SIZE, 330, GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                                .addGap(730, 730, 730)
                                .addComponent(유형콤보박스, GroupLayout.PREFERRED_SIZE, 210, GroupLayout.PREFERRED_SIZE)
                                .addGap(308, 308, 308)
                                .addComponent(검색버튼, GroupLayout.PREFERRED_SIZE, 100, GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                                .addGap(440, 440, 440)
                                .addComponent(실내라디오버튼, GroupLayout.PREFERRED_SIZE, 100, GroupLayout.PREFERRED_SIZE)
                                .addGap(9, 9, 9)
                                .addComponent(실외라디오버튼, GroupLayout.PREFERRED_SIZE, 90, GroupLayout.PREFERRED_SIZE)
                                .addGap(8, 8, 8)
                                .addComponent(상관없음라디오버튼, GroupLayout.PREFERRED_SIZE, 150, GroupLayout.PREFERRED_SIZE)
                                .addGap(163, 163, 163)
                                .addComponent(월, GroupLayout.PREFERRED_SIZE, 90, GroupLayout.PREFERRED_SIZE)
                                .addGap(33, 33, 33)
                                .addComponent(일, GroupLayout.PREFERRED_SIZE, 90, GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                                .addGap(410, 410, 410)
                                .addComponent(jScrollPane1, GroupLayout.PREFERRED_SIZE, 830, GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                                .addGap(440, 440, 440)
                                .addComponent(지역콤보박스, GroupLayout.PREFERRED_SIZE, 210, GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                                .addGap(1020, 1020, 1020)
                                .addComponent(날씨콤보박스, GroupLayout.PREFERRED_SIZE, 210, GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                                .addGap(760, 760, 760)
                                .addComponent(지역별날씨정보버튼, GroupLayout.PREFERRED_SIZE, 330, GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                                .addGap(1095, 1095, 1095)
                                .addComponent(관광치추천버튼, GroupLayout.PREFERRED_SIZE, 327, GroupLayout.PREFERRED_SIZE))
                        .addComponent(jLabel1, GroupLayout.PREFERRED_SIZE, 1700, GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addComponent(지역별관광지버튼, GroupLayout.PREFERRED_SIZE, 137, GroupLayout.PREFERRED_SIZE)
                                .addGap(149, 149, 149)
                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addGap(1, 1, 1)
                                                .addComponent(유형콤보박스, GroupLayout.PREFERRED_SIZE, 60, GroupLayout.PREFERRED_SIZE))
                                        .addComponent(검색버튼, GroupLayout.PREFERRED_SIZE, 60, GroupLayout.PREFERRED_SIZE))
                                .addGap(9, 9, 9)
                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                        .addComponent(월, GroupLayout.PREFERRED_SIZE, 52, GroupLayout.PREFERRED_SIZE)
                                        .addComponent(일, GroupLayout.PREFERRED_SIZE, 52, GroupLayout.PREFERRED_SIZE)
                                        .addGroup(layout.createSequentialGroup()
                                                .addGap(6, 6, 6)
                                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                                        .addComponent(실내라디오버튼, GroupLayout.PREFERRED_SIZE, 40, GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(실외라디오버튼, GroupLayout.PREFERRED_SIZE, 40, GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(상관없음라디오버튼, GroupLayout.PREFERRED_SIZE, 40, GroupLayout.PREFERRED_SIZE))))
                                .addGap(52, 52, 52)
                                .addComponent(jScrollPane1, GroupLayout.PREFERRED_SIZE, 360, GroupLayout.PREFERRED_SIZE))
                        .addComponent(지역별날씨정보버튼, GroupLayout.PREFERRED_SIZE, 137, GroupLayout.PREFERRED_SIZE)
                        .addComponent(관광치추천버튼, GroupLayout.PREFERRED_SIZE, 137, GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel1)
                        .addGroup(layout.createSequentialGroup()
                                .addGap(287, 287, 287)
                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                        .addComponent(지역콤보박스, GroupLayout.PREFERRED_SIZE, 60, GroupLayout.PREFERRED_SIZE)
                                        .addComponent(날씨콤보박스, GroupLayout.PREFERRED_SIZE, 60, GroupLayout.PREFERRED_SIZE)))
        );
        월.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                updateDayComboBox();
            }
        });

        updateDayComboBox();

        ActionListener l= e->{
            if(e.getSource()==검색버튼){
                String themeData=(String)유형콤보박스.getSelectedItem();
                String areaData=(String)지역콤보박스.getSelectedItem();
                String weatherData=(String)날씨콤보박스.getSelectedItem();
                String indoorData=getSelectedRadioButtonText();
                String monthData = (String) 월.getSelectedItem();
                String dayData = (String) 일.getSelectedItem();

                spotData=(ArrayList<String>)spotDAO.getSpotData(themeData,areaData,indoorData,monthData,dayData,weatherData);

                model.setColumnCount(0);
                model.setRowCount(0);

                if(spotData.size() == 0) {
                    model.addColumn("현재 조건에 해당 관광지가 없습니다.");
                } else if(spotData.size() == 1 && spotData.get(0).equals("날짜 오류")) {
                    model.addColumn("3일 후 부터 10일 후 까지의 날짜를 선택하십시오.");
                } else {
                    model.addColumn("관광지명");
                    model.addColumn("관광지 유형");
                    model.addColumn("실내/실외");
                    model.addColumn("기상정보");
                    model.addColumn("기온");

                    for(String datas:spotData){
                        System.out.println(datas);
                        String[] data = datas.split("#");
                        model.addRow(new Object[]{data[0],data[1],data[2],data[3],data[4]});
                        //System.out.println(data);
                    }
                }

                SwingUtilities.invokeLater(()->{
                    result.setModel(model);
                    jScrollPane1.setViewportView(result);
                    revalidate();
                    repaint();
                });
                System.out.println("관광지검색버튼");
            }
        };
        검색버튼.addActionListener(l);

        ActionListener comboboxListener = new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                JComboBox<String> selectedComboBox = (JComboBox<String>) e.getSource();

                if (selectedComboBox == 지역콤보박스) {
                    날씨콤보박스.removeActionListener(this);  // 리스너 임시 제거
                    try {
                        날씨콤보박스.setSelectedIndex(0);
                        System.out.println("지역 선택, 날씨는 상관없음으로");
                    } finally {
                        날씨콤보박스.addActionListener(this);  // 리스너 다시 추가
                    }
                } else if (selectedComboBox == 날씨콤보박스) {
                    지역콤보박스.removeActionListener(this);  // 리스너 임시 제거
                    try {
                        지역콤보박스.setSelectedIndex(0);
                        System.out.println("날씨 선택, 지역은 상관없음으로");
                    } finally {
                        지역콤보박스.addActionListener(this);  // 리스너 다시 추가
                    }
                }
            }
        };
        날씨콤보박스.addActionListener(comboboxListener);
        지역콤보박스.addActionListener(comboboxListener);

        ActionListener localattractionPanel = new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                //원하는 창을 제와한 모든 창을 닫는다
                setVisible(false);
                //원하는 창을 연다

                la.setVisible(true);
                System.out.println("지역날씨에서지역관광지");
            }
        };
        지역별관광지버튼.addActionListener(localattractionPanel);

        ActionListener localweatherPanel = new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                setVisible(false);

                lw.setVisible(true);
                System.out.println("지역관광지에서지역날씨");
            }
        };
        지역별날씨정보버튼.addActionListener(localweatherPanel);

        ActionListener recommendattractionPanel = new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                setVisible(false);

                ra.setRamdomspot();
                ra.setVisible(true);
                System.out.println("지역관광지에서관광지추천");
            }
        };
        관광치추천버튼.addActionListener(recommendattractionPanel);
        pack();
    }// </editor-fold>

    private void 검색버튼ActionPerformed(ActionEvent evt) {
        // TODO add your handling code here:
    }

    /**
     * @param args the command line arguments
     */


    // Variables declaration - do not modify
    private  String[]themeType={"상관 없음","문화/예술","체험/학습/산업","자연/힐링","캠핑/스포츠","종교/역사/전통","쇼핑/놀이"};
    private  String[]areaType={"상관 없음","서울","경기도","강원도영동", "강원도영서", "경상북도", "경상남도","충청북도", "충청남도","전라북도", "전라남도","부산","울산","대구","세종","대전","광주","인천","제주"};
    private  String[]weatherType={"상관 없음","맑음", "구름 많음","흐림", "비", "눈"};
    private static SpotDAO spotDAO = new SpotDAO();
    private static MidFcstInfoService midFcstInfoService = new MidFcstInfoService();
    private  ArrayList<String> spotData;
    private DefaultTableModel model=new DefaultTableModel();
    private  JTable result=new JTable();
    private  JLabel jLabel1;
    private  JScrollPane jScrollPane1;
    private  JTextArea jTextArea1;
    private  JButton 검색버튼;
    private  JButton 관광치추천버튼;
    private  JComboBox<String> 날씨콤보박스;
    private  ButtonGroup 라디오버튼그룹;
    private  JRadioButton 상관없음라디오버튼;
    private  JComboBox<String> 지역콤보박스;
    private  JRadioButton 실내라디오버튼;
    private  JRadioButton 실외라디오버튼;
    private  JComboBox<String> 월;
    private  JComboBox<String> 유형콤보박스;
    private  JComboBox<String> 일;
    private  JButton 지역별관광지버튼;
    private  JButton 지역별날씨정보버튼;
    // End of variables declaration
    public  String getSelectedRadioButtonText(){
        Enumeration<AbstractButton> elements=라디오버튼그룹.getElements();
        while(elements.hasMoreElements()){
            AbstractButton button=elements.nextElement();
            if(button.isSelected()){
                return button.getText();
            }
        }
        return"None selected";
    }
    public  void updateDayComboBox() {
        // 선택된 월 가져오기
        String selectedMonth = (String) 월.getSelectedItem();

        // 해당 월의 일 수 계산
        int daysInMonth = getDaysInMonth(Integer.parseInt(selectedMonth), 2023); // 일단 2023년으로

        // 일자 콤보박스 업데이트
        String[] daysArray = new String[daysInMonth];
        for (int i = 0; i < daysInMonth; i++) {
            daysArray[i] = String.format("%02d", i + 1);
        }
        일.setModel(new DefaultComboBoxModel<>(daysArray));
        System.out.println("일 콤보박스 갱신");
    }
    public  int getDaysInMonth(int month, int year) {
        switch (month) {
            case 1: case 3: case 5: case 7: case 8: case 10: case 12:
                return 31;
            case 4: case 6: case 9: case 11:
                return 30;
            case 2:
                return isLeapYear(year) ? 29 : 28;
            default:
                throw new IllegalArgumentException("Invalid month: " + month);
        }
    }

    public  boolean isLeapYear(int year) {
        return (year % 4 == 0 && year % 100 != 0) || (year % 400 == 0);
    }
}
