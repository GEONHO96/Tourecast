import org.json.JSONArray;
import org.json.JSONObject;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;
import java.text.SimpleDateFormat;
import java.util.*;



public class localWeather extends Main {

    private static final Map<String, String> WEATHER_TRANSLATIONS = new HashMap<>();
    private static final Map<String, String> KOREAN_TO_ENGLISH = new HashMap<>();





    static {

        WEATHER_TRANSLATIONS.put("Clear", "맑음");
        WEATHER_TRANSLATIONS.put("Clouds", "흐림");
        WEATHER_TRANSLATIONS.put("Rain", "비");
        WEATHER_TRANSLATIONS.put("Snow", "눈");
        WEATHER_TRANSLATIONS.put("Thunderstorm", "천둥번개");
        WEATHER_TRANSLATIONS.put("Drizzle", "이슬비");
        WEATHER_TRANSLATIONS.put("Mist", "안개");

        KOREAN_TO_ENGLISH.put("서울", "Seoul");
        KOREAN_TO_ENGLISH.put("경기", "Gyeonggi-do");
        KOREAN_TO_ENGLISH.put("강원도", "Gangwon-do");
        KOREAN_TO_ENGLISH.put("경상도", "Gyeongsangnam-do");
        KOREAN_TO_ENGLISH.put("충청도", "Chungcheongbuk-do");
        KOREAN_TO_ENGLISH.put("전라도", "Jeollanam-do");
        KOREAN_TO_ENGLISH.put("부산", "Busan");
        KOREAN_TO_ENGLISH.put("울산", "Ulsan");
        KOREAN_TO_ENGLISH.put("대구", "Daegu");
        KOREAN_TO_ENGLISH.put("세종", "Sejong");
        KOREAN_TO_ENGLISH.put("대전", "Daejeon");
        KOREAN_TO_ENGLISH.put("광주", "Gwangju");
        KOREAN_TO_ENGLISH.put("인천", "Incheon");
        KOREAN_TO_ENGLISH.put("제주", "Jeju");
    }


    private final String API_KEY = "61161451c28f9b7f2db7cd5dbc90b738";

    public localWeather() {
        initComponents();
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    public void initComponents() {
        System.out.println("localWeather -> initComponents");
        지역별관광지버튼 = new JButton();
        지역별날씨정보버튼 = new JButton();
        관광치추천버튼 = new JButton();
        검색버튼 = new JButton();
        시도텍스트필드 = new JComboBox();
        현재날씨아이콘 = new JLabel();
        미래날씨아이콘1 = new JLabel();
        미래날씨아이콘2 = new JLabel();
        미래날씨아이콘3 = new JLabel();
        미래날씨아이콘4 = new JLabel();
        현재날씨텍스트 = new JTextField();
        미래날씨텍스트1 = new JTextField();
        미래날씨텍스트2 = new JTextField();
        미래날씨텍스트3 = new JTextField();
        미래날씨텍스트4 = new JTextField();
        jLabel1 = new JLabel();

        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);

        지역별관광지버튼.setBackground(new Color(158, 141, 186));
        지역별관광지버튼.setFont(new Font("맑은 고딕", 0, 36)); // NOI18N
        지역별관광지버튼.setForeground(new Color(255, 255, 255));
        지역별관광지버튼.setText("지역별 관광지");

        지역별날씨정보버튼.setBackground(new Color(158, 141, 186));
        지역별날씨정보버튼.setFont(new Font("맑은 고딕", 0, 36)); // NOI18N
        지역별날씨정보버튼.setForeground(new Color(255, 255, 255));
        지역별날씨정보버튼.setText("지역별 날씨정보");

        관광치추천버튼.setBackground(new Color(158, 141, 186));
        관광치추천버튼.setFont(new Font("맑은 고딕", 0, 36)); // NOI18N
        관광치추천버튼.setForeground(new Color(255, 255, 255));
        관광치추천버튼.setText("관광지추천");

        검색버튼.setIcon(new ImageIcon(getClass().getResource("/images/검색버튼.png"))); // NOI18N

        시도텍스트필드.setBackground(new Color(204, 204, 204));
        시도텍스트필드.setFont(new Font("맑은 고딕", 0, 18)); // NOI18N

        현재날씨텍스트.setFont(new Font("맑은 고딕", 1, 24)); // NOI18N

        미래날씨텍스트1.setFont(new Font("맑은 고딕", 1, 15)); // NOI18N

        미래날씨텍스트2.setFont(new Font("맑은 고딕", 1, 15)); // NOI18N

        미래날씨텍스트3.setFont(new Font("맑은 고딕", 1, 15)); // NOI18N

        미래날씨텍스트4.setFont(new Font("맑은 고딕", 1, 15)); // NOI18N

        jLabel1.setIcon(new ImageIcon(getClass().getResource("/images/지역별날씨정보.png"))); // NOI18N
        jLabel1.setText("jLabel1");

        // JComboBox에 지역 목록 설정
        String[] areaType = {"서울", "경기", "강원도", "경상도", "충청도", "전라도", "부산", "울산", "대구", "세종", "대전", "광주", "인천", "제주"};
        시도텍스트필드 = new JComboBox<>(areaType);

        // JComboBox의 항목 렌더링을 설정하여 폰트를 변경
        시도텍스트필드.setRenderer(new DefaultListCellRenderer() {
            @Override
            public Component getListCellRendererComponent(JList<?> list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
                JLabel renderer = (JLabel) super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);
                renderer.setFont(new Font("맑은 고딕", Font.PLAIN, 24));
                return renderer;
            }
        });

        // JComboBox의 ActionEvent를 처리하는 부분
        시도텍스트필드.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                // JComboBox에서 선택된 지역 가져오기
                String selectedCity = (String) 시도텍스트필드.getSelectedItem();
                System.out.println("시도텍스트필드");
                // 여기에 선택된 지역에 대한 추가 작업 수행
                // 예: 선택된 지역에 대한 날씨 정보 가져오기 등
            }
        });

        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGap(730, 730, 730)
                                .addComponent(현재날씨아이콘, GroupLayout.PREFERRED_SIZE, 250, GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                                .addGap(380, 380, 380)
                                .addComponent(미래날씨아이콘1, GroupLayout.PREFERRED_SIZE, 110, GroupLayout.PREFERRED_SIZE)
                                .addGap(470, 470, 470)
                                .addComponent(미래날씨아이콘3, GroupLayout.PREFERRED_SIZE, 110, GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                                .addGap(340, 340, 340)
                                .addComponent(미래날씨텍스트1, GroupLayout.PREFERRED_SIZE, 190, GroupLayout.PREFERRED_SIZE)
                                .addGap(390, 390, 390)
                                .addComponent(미래날씨텍스트3, GroupLayout.PREFERRED_SIZE, 190, GroupLayout.PREFERRED_SIZE)
                                .addGap(100, 100, 100)
                                .addComponent(미래날씨텍스트4, GroupLayout.PREFERRED_SIZE, 190, GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                                .addGap(1240, 1240, 1240)
                                .addComponent(미래날씨아이콘4, GroupLayout.PREFERRED_SIZE, 110, GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                                .addGap(760, 760, 760)
                                .addComponent(지역별날씨정보버튼, GroupLayout.PREFERRED_SIZE, 330, GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                                .addGap(670, 670, 670)
                                .addComponent(미래날씨아이콘2, GroupLayout.PREFERRED_SIZE, 110, GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                                .addGap(457, 457, 457)
                                .addComponent(시도텍스트필드, GroupLayout.PREFERRED_SIZE, 800, GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                                .addGap(1270, 1270, 1270)
                                .addComponent(검색버튼, GroupLayout.PREFERRED_SIZE, 100, GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                                .addGap(1095, 1095, 1095)
                                .addComponent(관광치추천버튼, GroupLayout.PREFERRED_SIZE, 327, GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                                .addGap(660, 660, 660)
                                .addComponent(현재날씨텍스트, GroupLayout.PREFERRED_SIZE, 370, GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                                .addGap(630, 630, 630)
                                .addComponent(미래날씨텍스트2, GroupLayout.PREFERRED_SIZE, 190, GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                                .addGap(421, 421, 421)
                                .addComponent(지역별관광지버튼, GroupLayout.PREFERRED_SIZE, 330, GroupLayout.PREFERRED_SIZE))
                        .addComponent(jLabel1, GroupLayout.PREFERRED_SIZE, 1700, GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGap(350, 350, 350)
                                .addComponent(현재날씨아이콘, GroupLayout.PREFERRED_SIZE, 190, GroupLayout.PREFERRED_SIZE)
                                .addGap(110, 110, 110)
                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                        .addComponent(미래날씨아이콘1, GroupLayout.PREFERRED_SIZE, 100, GroupLayout.PREFERRED_SIZE)
                                        .addComponent(미래날씨아이콘3, GroupLayout.PREFERRED_SIZE, 100, GroupLayout.PREFERRED_SIZE))
                                .addGap(10, 10, 10)
                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                        .addComponent(미래날씨텍스트1, GroupLayout.PREFERRED_SIZE, 90, GroupLayout.PREFERRED_SIZE)
                                        .addComponent(미래날씨텍스트3, GroupLayout.PREFERRED_SIZE, 90, GroupLayout.PREFERRED_SIZE)
                                        .addComponent(미래날씨텍스트4, GroupLayout.PREFERRED_SIZE, 90, GroupLayout.PREFERRED_SIZE)))
                        .addGroup(layout.createSequentialGroup()
                                .addGap(650, 650, 650)
                                .addComponent(미래날씨아이콘4, GroupLayout.PREFERRED_SIZE, 100, GroupLayout.PREFERRED_SIZE))
                        .addComponent(지역별날씨정보버튼, GroupLayout.PREFERRED_SIZE, 137, GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createSequentialGroup()
                                .addGap(650, 650, 650)
                                .addComponent(미래날씨아이콘2, GroupLayout.PREFERRED_SIZE, 100, GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                                .addGap(287, 287, 287)
                                .addComponent(시도텍스트필드, GroupLayout.PREFERRED_SIZE, 60, GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                                .addGap(286, 286, 286)
                                .addComponent(검색버튼))
                        .addComponent(관광치추천버튼, GroupLayout.PREFERRED_SIZE, 137, GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createSequentialGroup()
                                .addGap(550, 550, 550)
                                .addComponent(현재날씨텍스트, GroupLayout.PREFERRED_SIZE, 70, GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                                .addGap(760, 760, 760)
                                .addComponent(미래날씨텍스트2, GroupLayout.PREFERRED_SIZE, 90, GroupLayout.PREFERRED_SIZE))
                        .addComponent(지역별관광지버튼, GroupLayout.PREFERRED_SIZE, 137, GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel1)
        );검색버튼.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {

                // 검색 버튼이 클릭되었을 때 수행할 동작 정의
                // 예제: 시도텍스트필드에서 선택한 시도 가져오기
                String selectedCity = (String) 시도텍스트필드.getSelectedItem();
                System.out.println("지역날씨검색버튼");
                // 한글을 영어로 변환
                String englishLocation = KOREAN_TO_ENGLISH.getOrDefault(selectedCity, selectedCity);

                // 예제: OpenWeatherMap API 호출 및 날씨 정보 가져오기
                String apiUrl = "http://api.openweathermap.org/data/2.5/forecast?q=" + englishLocation + "&appid=" + API_KEY;

                try {
                    URL url = new URL(apiUrl);
                    HttpURLConnection connection = (HttpURLConnection) url.openConnection();
                    connection.setRequestMethod("GET");

                    BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));
                    StringBuilder response = new StringBuilder();
                    String line;

                    while ((line = reader.readLine()) != null) {
                        response.append(line);
                    }

                    reader.close();
                    connection.disconnect();

                    // JSON 파싱
                    JSONObject jsonResponse = new JSONObject(response.toString());
                    JSONArray forecastList = jsonResponse.getJSONArray("list");

                    // 현재 날씨 정보 가져오기
                    JSONObject currentForecast = forecastList.getJSONObject(0);
                    JSONObject main = currentForecast.getJSONObject("main");
                    double currentTemperature = main.getDouble("temp");
                    JSONArray currentWeatherArray = currentForecast.getJSONArray("weather");
                    JSONObject currentWeatherObject = currentWeatherArray.getJSONObject(0);
                    String currentWeatherMain = currentWeatherObject.getString("main");

                    // 섭씨로 변환
                    double currentCelsiusTemperature = currentTemperature - 273.15;

                    // 날씨 번역
                    String currentTranslatedWeather = WEATHER_TRANSLATIONS.getOrDefault(currentWeatherMain, "알 수 없음");

                    // 날씨 정보를 현재날씨텍스트에 표시
                    현재날씨텍스트.setText("현재 온도: " + String.format("%.2f", currentCelsiusTemperature) + " ℃\n 날씨: " + currentTranslatedWeather);

                    // 이미지 초기화
                    현재날씨아이콘.setIcon(null);
                    현재날씨아이콘.setText(null);
                    미래날씨아이콘1.setIcon(null);
                    미래날씨아이콘1.setText(null);
                    미래날씨아이콘2.setIcon(null);
                    미래날씨아이콘2.setText(null);
                    미래날씨아이콘3.setIcon(null);
                    미래날씨아이콘3.setText(null);
                    미래날씨아이콘4.setIcon(null);
                    미래날씨아이콘4.setText(null);

                    // '맑음'인 경우 이미지 설정
                    if ("맑음".equals(currentTranslatedWeather)) {
                        ImageIcon clearIcon = new ImageIcon(getClass().getResource("/images/clear.png"));
                        Image scaledImage = clearIcon.getImage().getScaledInstance(현재날씨텍스트.getWidth() / 2, clearIcon.getIconHeight() * 현재날씨텍스트.getWidth() / (2 * clearIcon.getIconWidth()), Image.SCALE_SMOOTH);
                        ImageIcon scaledIcon = new ImageIcon(scaledImage);

                        현재날씨아이콘.setIcon(scaledIcon);
                        현재날씨아이콘.setText("");
                    } else if("흐림".equals(currentTranslatedWeather)) {
                        // 다른 날씨에 대한 이미지 설정 추가
                        // 예: 흐림, 비, 눈 등
                        ImageIcon clearIcon = new ImageIcon(getClass().getResource("/images/clouds.png"));
                        Image scaledImage = clearIcon.getImage().getScaledInstance(현재날씨텍스트.getWidth() / 2, clearIcon.getIconHeight() * 현재날씨텍스트.getWidth() / (2 * clearIcon.getIconWidth()), Image.SCALE_SMOOTH);
                        ImageIcon scaledIcon = new ImageIcon(scaledImage);

                        현재날씨아이콘.setIcon(scaledIcon);
                        현재날씨아이콘.setText("");
                    } else if("비".equals(currentTranslatedWeather)){
                        // 다른 날씨에 대한 이미지 설정 추가
                        // 예: 흐림, 비, 눈 등
                        ImageIcon clearIcon = new ImageIcon(getClass().getResource("/images/rain.png"));
                        Image scaledImage = clearIcon.getImage().getScaledInstance(현재날씨텍스트.getWidth() / 2, clearIcon.getIconHeight() * 현재날씨텍스트.getWidth() / (2 * clearIcon.getIconWidth()), Image.SCALE_SMOOTH);
                        ImageIcon scaledIcon = new ImageIcon(scaledImage);

                        현재날씨아이콘.setIcon(scaledIcon);
                        현재날씨아이콘.setText("");
                    }else if("눈".equals(currentTranslatedWeather)){
                        // 다른 날씨에 대한 이미지 설정 추가
                        // 예: 흐림, 비, 눈 등
                        ImageIcon clearIcon = new ImageIcon(getClass().getResource("/images/snow.png"));
                        Image scaledImage = clearIcon.getImage().getScaledInstance(현재날씨텍스트.getWidth() / 2, clearIcon.getIconHeight() * 현재날씨텍스트.getWidth() / (2 * clearIcon.getIconWidth()), Image.SCALE_SMOOTH);
                        ImageIcon scaledIcon = new ImageIcon(scaledImage);

                        현재날씨아이콘.setIcon(scaledIcon);
                        현재날씨아이콘.setText("");
                    }
                    // 아래에 다음 날짜의 4개의 시간대의 정보 표시
                    //    resultArea.setText(englishLocation + "의 " +  " 날짜 시간별 날씨 정보\n");
                    Calendar selectedCalendar = Calendar.getInstance();
                    SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
                    SimpleDateFormat timeFormat = new SimpleDateFormat("HH:mm");

                    // 현재 시간 가져오기
                    Date currentTime = new Date();

                    // 3시간 간격으로 다음 12시간 동안의 날씨 정보를 표시
                    for (int i = 0; i < forecastList.length() && i < 4; i++) {
                        JSONObject forecast =  forecastList.getJSONObject(i);
                        long timestamp = forecast.getLong("dt");
                        Date forecastDate = new Date(timestamp * 1000);

                        // 예보 날짜가 현재 시간 이후인지 확인
                        if (forecastDate.after(currentTime)) {
                            String time = timeFormat.format(forecastDate);

                            JSONObject forecastMain = forecast.getJSONObject("main");
                            double temperature = forecastMain.getDouble("temp");

                            JSONArray weatherArray = forecast.getJSONArray("weather");
                            JSONObject weatherObject = weatherArray.getJSONObject(0);
                            String weatherMain = weatherObject.getString("main");

                            double celsiusTemperature = temperature - 273.15;
                            String translatedWeather = WEATHER_TRANSLATIONS.getOrDefault(weatherMain, "알 수 없음");

                            //여기서 이제 파넬에 표시
                            if(i==0) {
                                미래날씨텍스트1.setText(time + ":  온도: " + String.format("%.0f", celsiusTemperature) + "°C, " + translatedWeather + "\n");

                                if ("맑음".equals(translatedWeather)) {
                                    ImageIcon clearIcon = new ImageIcon(getClass().getResource("/images/clear.png"));
                                    ImageIcon clearIcon1 = new ImageIcon(getClass().getResource("/images/clear.png"));
                                    Image scaledImage1 = clearIcon1.getImage().getScaledInstance(현재날씨텍스트.getWidth() / 3, clearIcon.getIconHeight() * 현재날씨텍스트.getWidth() / (3 * clearIcon.getIconWidth()), Image.SCALE_SMOOTH);
                                    ImageIcon scaledIcon1 = new ImageIcon(scaledImage1);

                                    미래날씨아이콘1.setIcon(scaledIcon1);
                                    미래날씨아이콘1.setText("");
                                }
                                if("흐림".equals(translatedWeather)) {
                                    ImageIcon clearIcon = new ImageIcon(getClass().getResource("/images/clouds.png"));
                                    ImageIcon clearIcon1 = new ImageIcon(getClass().getResource("/images/clouds.png"));
                                    Image scaledImage1 = clearIcon1.getImage().getScaledInstance(현재날씨텍스트.getWidth() / 3, clearIcon.getIconHeight() * 현재날씨텍스트.getWidth() / (3 * clearIcon.getIconWidth()), Image.SCALE_SMOOTH);
                                    ImageIcon scaledIcon1 = new ImageIcon(scaledImage1);

                                    미래날씨아이콘1.setIcon(scaledIcon1);
                                    미래날씨아이콘1.setText("");
                                }
                                if("비".equals(translatedWeather)){
                                    ImageIcon clearIcon = new ImageIcon(getClass().getResource("/images/rain.png"));
                                    ImageIcon clearIcon1 = new ImageIcon(getClass().getResource("/images/rain.png"));
                                    Image scaledImage1 = clearIcon1.getImage().getScaledInstance(현재날씨텍스트.getWidth() / 3, clearIcon.getIconHeight() * 현재날씨텍스트.getWidth() / (3 * clearIcon.getIconWidth()), Image.SCALE_SMOOTH);
                                    ImageIcon scaledIcon1 = new ImageIcon(scaledImage1);

                                    미래날씨아이콘1.setIcon(scaledIcon1);
                                    미래날씨아이콘1.setText("");
                                }
                                if("눈".equals(translatedWeather)){
                                    ImageIcon clearIcon = new ImageIcon(getClass().getResource("/images/snow.png"));
                                    ImageIcon clearIcon1 = new ImageIcon(getClass().getResource("/images/snow.png"));
                                    Image scaledImage1 = clearIcon1.getImage().getScaledInstance(현재날씨텍스트.getWidth() / 3, clearIcon.getIconHeight() * 현재날씨텍스트.getWidth() / (3 * clearIcon.getIconWidth()), Image.SCALE_SMOOTH);
                                    ImageIcon scaledIcon1 = new ImageIcon(scaledImage1);

                                    미래날씨아이콘1.setIcon(scaledIcon1);
                                    미래날씨아이콘1.setText("");
                                }
                            }
                            if(i==1) {
                                미래날씨텍스트2.setText(time + ":  온도: " + String.format("%.0f", celsiusTemperature) + "°C, " + translatedWeather + "\n");
                                if ("맑음".equals(translatedWeather)) {
                                    ImageIcon clearIcon = new ImageIcon(getClass().getResource("/images/clear.png"));
                                    ImageIcon clearIcon1 = new ImageIcon(getClass().getResource("/images/clear.png"));
                                    Image scaledImage1 = clearIcon1.getImage().getScaledInstance(현재날씨텍스트.getWidth() / 3, clearIcon.getIconHeight() * 현재날씨텍스트.getWidth() / (3 * clearIcon.getIconWidth()), Image.SCALE_SMOOTH);
                                    ImageIcon scaledIcon1 = new ImageIcon(scaledImage1);

                                    미래날씨아이콘2.setIcon(scaledIcon1);
                                    미래날씨아이콘2.setText("");
                                }
                                if("흐림".equals(translatedWeather)) {
                                    ImageIcon clearIcon = new ImageIcon(getClass().getResource("/images/clouds.png"));
                                    ImageIcon clearIcon1 = new ImageIcon(getClass().getResource("/images/clouds.png"));
                                    Image scaledImage1 = clearIcon1.getImage().getScaledInstance(현재날씨텍스트.getWidth() / 3, clearIcon.getIconHeight() * 현재날씨텍스트.getWidth() / (3 * clearIcon.getIconWidth()), Image.SCALE_SMOOTH);
                                    ImageIcon scaledIcon1 = new ImageIcon(scaledImage1);

                                    미래날씨아이콘2.setIcon(scaledIcon1);
                                    미래날씨아이콘2.setText("");
                                }
                                if("비".equals(translatedWeather)){
                                    ImageIcon clearIcon = new ImageIcon(getClass().getResource("/images/rain.png"));
                                    ImageIcon clearIcon1 = new ImageIcon(getClass().getResource("/images/rain.png"));
                                    Image scaledImage1 = clearIcon1.getImage().getScaledInstance(현재날씨텍스트.getWidth() / 3, clearIcon.getIconHeight() * 현재날씨텍스트.getWidth() / (3 * clearIcon.getIconWidth()), Image.SCALE_SMOOTH);
                                    ImageIcon scaledIcon1 = new ImageIcon(scaledImage1);

                                    미래날씨아이콘2.setIcon(scaledIcon1);
                                    미래날씨아이콘2.setText("");
                                }
                                if("눈".equals(translatedWeather)){
                                    ImageIcon clearIcon = new ImageIcon(getClass().getResource("/images/snow.png"));
                                    ImageIcon clearIcon1 = new ImageIcon(getClass().getResource("/images/snow.png"));
                                    Image scaledImage1 = clearIcon1.getImage().getScaledInstance(현재날씨텍스트.getWidth() / 3, clearIcon.getIconHeight() * 현재날씨텍스트.getWidth() / (3 * clearIcon.getIconWidth()), Image.SCALE_SMOOTH);
                                    ImageIcon scaledIcon1 = new ImageIcon(scaledImage1);

                                    미래날씨아이콘2.setIcon(scaledIcon1);
                                    미래날씨아이콘2.setText("");
                                }
                            }
                            if(i==2) {
                                미래날씨텍스트3.setText(time + ":  온도: " + String.format("%.0f", celsiusTemperature) + "°C, " + translatedWeather + "\n");
                                if ("맑음".equals(translatedWeather)) {
                                    ImageIcon clearIcon = new ImageIcon(getClass().getResource("/images/clear.png"));
                                    ImageIcon clearIcon1 = new ImageIcon(getClass().getResource("/images/clear.png"));
                                    Image scaledImage1 = clearIcon1.getImage().getScaledInstance(현재날씨텍스트.getWidth() / 3, clearIcon.getIconHeight() * 현재날씨텍스트.getWidth() / (3 * clearIcon.getIconWidth()), Image.SCALE_SMOOTH);
                                    ImageIcon scaledIcon1 = new ImageIcon(scaledImage1);

                                    미래날씨아이콘3.setIcon(scaledIcon1);
                                    미래날씨아이콘3.setText("");
                                }
                                if("흐림".equals(translatedWeather)) {
                                    ImageIcon clearIcon = new ImageIcon(getClass().getResource("/images/clouds.png"));
                                    ImageIcon clearIcon1 = new ImageIcon(getClass().getResource("/images/clouds.png"));
                                    Image scaledImage1 = clearIcon1.getImage().getScaledInstance(현재날씨텍스트.getWidth() / 3, clearIcon.getIconHeight() * 현재날씨텍스트.getWidth() / (3 * clearIcon.getIconWidth()), Image.SCALE_SMOOTH);
                                    ImageIcon scaledIcon1 = new ImageIcon(scaledImage1);

                                    미래날씨아이콘3.setIcon(scaledIcon1);
                                    미래날씨아이콘3.setText("");
                                }
                                if("비".equals(translatedWeather)){
                                    ImageIcon clearIcon = new ImageIcon(getClass().getResource("/images/rain.png"));
                                    ImageIcon clearIcon1 = new ImageIcon(getClass().getResource("/images/rain.png"));
                                    Image scaledImage1 = clearIcon1.getImage().getScaledInstance(현재날씨텍스트.getWidth() / 3, clearIcon.getIconHeight() * 현재날씨텍스트.getWidth() / (3 * clearIcon.getIconWidth()), Image.SCALE_SMOOTH);
                                    ImageIcon scaledIcon1 = new ImageIcon(scaledImage1);

                                    미래날씨아이콘3.setIcon(scaledIcon1);
                                    미래날씨아이콘3.setText("");
                                }
                                if("눈".equals(translatedWeather)){
                                    ImageIcon clearIcon = new ImageIcon(getClass().getResource("/images/snow.png"));
                                    ImageIcon clearIcon1 = new ImageIcon(getClass().getResource("/images/snow.png"));
                                    Image scaledImage1 = clearIcon1.getImage().getScaledInstance(현재날씨텍스트.getWidth() / 3, clearIcon.getIconHeight() * 현재날씨텍스트.getWidth() / (3 * clearIcon.getIconWidth()), Image.SCALE_SMOOTH);
                                    ImageIcon scaledIcon1 = new ImageIcon(scaledImage1);

                                    미래날씨아이콘3.setIcon(scaledIcon1);
                                    미래날씨아이콘3.setText("");
                                }
                            }
                            if(i==3) {
                                미래날씨텍스트4.setText(time + ":  온도: " + String.format("%.0f", celsiusTemperature) + "°C, " + translatedWeather + "\n");
                                if ("맑음".equals(translatedWeather)) {
                                    ImageIcon clearIcon = new ImageIcon(getClass().getResource("/images/clear.png"));
                                    ImageIcon clearIcon1 = new ImageIcon(getClass().getResource("/images/clear.png"));
                                    Image scaledImage1 = clearIcon1.getImage().getScaledInstance(현재날씨텍스트.getWidth() / 3, clearIcon.getIconHeight() * 현재날씨텍스트.getWidth() / (3 * clearIcon.getIconWidth()), Image.SCALE_SMOOTH);
                                    ImageIcon scaledIcon1 = new ImageIcon(scaledImage1);

                                    미래날씨아이콘4.setIcon(scaledIcon1);
                                    미래날씨아이콘4.setText("");
                                }
                                if("흐림".equals(translatedWeather)) {
                                    ImageIcon clearIcon = new ImageIcon(getClass().getResource("/images/clouds.png"));
                                    ImageIcon clearIcon1 = new ImageIcon(getClass().getResource("/images/clouds.png"));
                                    Image scaledImage1 = clearIcon1.getImage().getScaledInstance(현재날씨텍스트.getWidth() / 3, clearIcon.getIconHeight() * 현재날씨텍스트.getWidth() / (3 * clearIcon.getIconWidth()), Image.SCALE_SMOOTH);
                                    ImageIcon scaledIcon1 = new ImageIcon(scaledImage1);

                                    미래날씨아이콘4.setIcon(scaledIcon1);
                                    미래날씨아이콘4.setText("");
                                }
                                if("비".equals(translatedWeather)){
                                    ImageIcon clearIcon = new ImageIcon(getClass().getResource("/images/rain.png"));
                                    ImageIcon clearIcon1 = new ImageIcon(getClass().getResource("/images/rain.png"));
                                    Image scaledImage1 = clearIcon1.getImage().getScaledInstance(현재날씨텍스트.getWidth() / 3, clearIcon.getIconHeight() * 현재날씨텍스트.getWidth() / (3 * clearIcon.getIconWidth()), Image.SCALE_SMOOTH);
                                    ImageIcon scaledIcon1 = new ImageIcon(scaledImage1);

                                    미래날씨아이콘4.setIcon(scaledIcon1);
                                    미래날씨아이콘4.setText("");
                                }
                                if("눈".equals(translatedWeather)){
                                    ImageIcon clearIcon = new ImageIcon(getClass().getResource("/images/snow.png"));
                                    ImageIcon clearIcon1 = new ImageIcon(getClass().getResource("/images/snow.png"));
                                    Image scaledImage1 = clearIcon1.getImage().getScaledInstance(현재날씨텍스트.getWidth() / 3, clearIcon.getIconHeight() * 현재날씨텍스트.getWidth() / (3 * clearIcon.getIconWidth()), Image.SCALE_SMOOTH);
                                    ImageIcon scaledIcon1 = new ImageIcon(scaledImage1);

                                    미래날씨아이콘4.setIcon(scaledIcon1);
                                    미래날씨아이콘4.setText("");

                                }
                            }
                        }
                    }
                } catch (Exception ex) {
                    ex.printStackTrace();
                }
            }
        });

        ActionListener localattractionPanel = new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                setVisible(false);

                la.setVisible(true);
                System.out.println("지역날씨에서지역관광지");
            }
        };
        지역별관광지버튼.addActionListener(localattractionPanel);

        ActionListener localweatherPanel = new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                setVisible(false);

                lw.setVisible(true);
                System.out.println("지역관광지에서지역날씨");
            }
        };
        지역별날씨정보버튼.addActionListener(localweatherPanel);

        ActionListener recommendattractionPanel = new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                setVisible(false);

                ra.setRamdomspot();
                ra.setVisible(true);
                System.out.println("지역날씨에서관광지추천");
            }
        };
        관광치추천버튼.addActionListener(recommendattractionPanel);

        pack();
    }// </editor-fold>

    /**
     * @param args the command line arguments
     *
     *
     */
    // Variables declaration - do not modify
    private JLabel jLabel1;
    private JButton 검색버튼;
    private JButton 관광치추천버튼;
    private JLabel 미래날씨아이콘1;
    private JLabel 미래날씨아이콘2;
    private JLabel 미래날씨아이콘3;
    private JLabel 미래날씨아이콘4;
    private JTextField 미래날씨텍스트1;
    private JTextField 미래날씨텍스트2;
    private JTextField 미래날씨텍스트3;
    private JTextField 미래날씨텍스트4;
    private JComboBox 시도텍스트필드;
    private JButton 지역별관광지버튼;
    private JButton 지역별날씨정보버튼;
    private JLabel 현재날씨아이콘;
    private JTextField 현재날씨텍스트;
}